{"version":3,"sources":["components/Loading.js","api/index.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["Loading","id","className","BASE_URL","KEY","fetchQueryResultsFromURL","url","a","fetch","response","json","data","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Preview","props","setSearchResults","setFeaturedResult","setIsLoading","searchResults","info","fetchPage","pageUrl","results","console","error","disabled","prev","onClick","next","map","record","index","key","event","preventDefault","primaryimageurl","src","alt","description","title","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","result","allCenturies","allClassifications","catch","log","onSubmit","htmlFor","type","placeholder","value","onChange","target","length","name","Map","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa36bbd3.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Loading() {\n    return (\n      <div id=\"loading\">\n        <h2 className=\"message\">Searching...</h2>\n      </div>\n    )\n}\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n * \n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n\n\n\n export default Loading","/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=9249c3cf-6bb5-4274-b30c-c56f85f57a0a';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\nconst {setSearchResults, setFeaturedResult, setIsLoading, searchResults} = props;\nconst {info, records} = searchResults;\n\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      <button \n        disabled={!info.prev}\n        className=\"previous\"\n        onClick={() => fetchPage(info.prev)}>Previous</button>\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n      <button\n        disabled={!info.next}\n        className=\"next\"\n        onClick={() => fetchPage(info.next)}>Next</button>\n    </header>\n    <section className=\"results\">\n      {\n        records.map((record, index)=>{return(\n          <div\n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              event.preventDefault();\n              // set the featured result to be this record, using setFeaturedResult\n              setFeaturedResult(record)\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n              record.primaryimageurl ? <img src={ record.primaryimageurl } alt={ record.description } /> : null\n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n              record.title ? <h3>{ record.title }</h3> : <h3>MISSING INFO</h3>\n            }\n          </div>\n        )})\n      }   \n    </section>\n  </aside>\n  console.log(records)\n}\n\n\nexport default Preview;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = ({ setIsLoading, setSearchResults }) => {\n\n\nconst [centuryList, setCenturyList] = useState([]);\nconst [classificationList, setClassificationList] = useState([])\nconst [queryString, setQueryString] = useState('');\nconst [century, setCentury] = useState('any');\nconst [classification, setClassification] = useState('any');\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    Promise.all([\n      fetchAllCenturies(), \n      fetchAllClassifications()\n    ]).then((result) => {\n      const allCenturies = result[0]\n      const allClassifications = result[1]\n      setCenturyList(allCenturies)\n      setClassificationList(allClassifications)\n    }).catch(() => {\n      console.log(\"error\")\n    })}, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n  return <form id=\"search\" onSubmit={async (event) => {\n    // write code here\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResults({ century, classification, queryString });\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={(event) => setQueryString(event.target.value)}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={(event) => setClassification(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {/* map over the classificationList, return an <option /> */\n        (event) => Map.classificationList}\n        return <option/>\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={(event) => setCentury(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {/* map over the centuryList, return an <option /> */\n        (event) => Map.centuryList}\n        return <option/>\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;","import React from \"react\";\n\nfunction Title() {\n  return (\n    <div id=\"title\">\n      <h1>The Art Collector</h1>\n      <h5>Search the Harvard Art Museums' Private Collections</h5>\n    </div>\n  );\n}\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n *\n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n\nexport default Title;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\n//import Feature from './components/Feature'\nimport Loading from './components/Loading';\nimport Preview from './components/Preview'\nimport Search from './components/Search'\nimport Title from './components/Title'\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n  const [searchResults, setSearchResults] = useState({info: {}, records: []});\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const thing = 'thing'\n\n  return <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n    <Title />\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    {/* <Feature featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={setSearchResults} /> */}\n    {/* <Loading /> is static, but should only render when isLoading is true */}\n     {/* use a ternary and render null if isLoading is false */}\n    {isLoading ? <Loading /> : null}\n  </div>\n}\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\nReactDOM.render(<App/>, document.getElementById('app'));"],"sourceRoot":""}